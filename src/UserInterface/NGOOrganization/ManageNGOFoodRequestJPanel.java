/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.NGOOrganization;

import Business.Constant;
import Business.EcoSystem;
import Business.Enterpise.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FoodRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rahul Zore
 */
public class ManageNGOFoodRequestJPanel extends javax.swing.JPanel implements ProgressJPanel.ProgressBarInterface {

    /**
     * Creates new form ManageNGOFoodRequestJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;

    public ManageNGOFoodRequestJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        progressJPanel1.pbr = this;
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        populateFoodReqTable();
    }

    public void populateFoodReqTable() {
        DefaultTableModel dtm = (DefaultTableModel) foodRequestJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[5];
            row[0] = request;
            row[1] = ((FoodRequest) request).getFoodName();
            row[2] = request.getSender();
            row[3] = request.getReceiver() == null ? Constant.TR_REQUESTSTATUS_UNASSIGNED : request.getReceiver();
            row[4] = request.getStatus() == null ? Constant.TR_REQUESTSTATUS_WAITING : request.getStatus();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        foodRequestJTable = new javax.swing.JTable();
        backJBtn = new javax.swing.JButton();
        processJBtn = new javax.swing.JButton();
        progressJPanel1 = new UserInterface.NGOOrganization.ProgressJPanel();
        progressLabel = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Manage Food Request");

        foodRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Food Name", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(foodRequestJTable);
        if (foodRequestJTable.getColumnModel().getColumnCount() > 0) {
            foodRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            foodRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            foodRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            foodRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            foodRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        backJBtn.setText("<< Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        processJBtn.setText("Process Request");
        processJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout progressJPanel1Layout = new javax.swing.GroupLayout(progressJPanel1);
        progressJPanel1.setLayout(progressJPanel1Layout);
        progressJPanel1Layout.setHorizontalGroup(
            progressJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );
        progressJPanel1Layout.setVerticalGroup(
            progressJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        progressLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(backJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(220, 220, 220))
                    .addComponent(processJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(301, 301, 301))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(220, 220, 220)))
                    .addComponent(progressJPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(processJBtn)
                .addGap(18, 18, 18)
                .addComponent(progressJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backJBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void processJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJBtnActionPerformed
        // TODO add your handling code here:
//        new Thread(new Runnable() {
//            @Override
//            public void run() {
//                for (int i = 1; i <= 100; i++) {
//                    try {
//                        progressJPanel1.updateProgress(i);
//                        progressJPanel1.repaint();
//                        Thread.sleep(50);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(ManageNGOFoodRequestJPanel.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }
//        }).start();
         
        int selectedRow = foodRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to process request!!");
            return;
        } 
        if(selectedRow>=0){
            WorkRequest request = (WorkRequest) foodRequestJTable.getValueAt(selectedRow, 0);
            if (!(request.getStatus()==null)) {
                JOptionPane.showMessageDialog(null, "This request has been completed. Please select some other request!!");
                return;
            } else {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        for (int i = 1; i <= 100; i++) {
                            try {
                                progressJPanel1.updateProgress(i);
                                progressJPanel1.repaint();
                                Thread.sleep(50);
                                if (i == 50) {
                                    Thread.sleep(1000);
                                }
                                if (i == 100) {

                                    request.setStatus("Completed");
                                    request.setReceiver(userAccount);
                                    JOptionPane.showMessageDialog(null, "Food request processing is completed. Food has been distributed to the needful people!!");
                                    populateFoodReqTable();
                                }
                            } catch (InterruptedException ex) {
                                Logger.getLogger(ManageNGOFoodRequestJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }).start();
//            WorkRequest request = (WorkRequest) foodRequestJTable.getValueAt(selectedRow, 0);
//            request.setStatus("Completed");
//            request.setReceiver(userAccount);
//            JOptionPane.showMessageDialog(null, "Food request processing is completed. Food will be collected and will be distributed to the needful people!!");
//            populateFoodReqTable();
            }
        }
    }//GEN-LAST:event_processJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJBtn;
    private javax.swing.JTable foodRequestJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJBtn;
    private UserInterface.NGOOrganization.ProgressJPanel progressJPanel1;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void OnProgressHalfComplete() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                progressLabel.setText("NGO has collected the leftover food from the Restaurant!!");
            }
        }).start();

    }

    @Override
    public void OnProgressComplete() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                progressLabel.setText("NGO has successfully distributed the leftover food to needful people!!");
            }
        }).start();

    }
}
